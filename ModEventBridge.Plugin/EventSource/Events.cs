// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: events.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ModEventBridge.Plugin.EventSource {

  /// <summary>Holder for reflection information generated from events.proto</summary>
  public static partial class EventsReflection {

    #region Descriptor
    /// <summary>File descriptor for events.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxldmVudHMucHJvdG8SHG1vZGV2ZW50YnJpZGdlLnBsdWdpbi5ldmVudHMa",
            "H2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8i/QMKBUV2ZW50EhwK",
            "CXRhcmdldF9pZBgBIAEoCVIJdGFyZ2V0X2lkEiAKC3RhcmdldF9uYW1lGAIg",
            "ASgJUgt0YXJnZXRfbmFtZRIYCgd1c2VyX2lkGAMgASgJUgd1c2VyX2lkEhwK",
            "CXVzZXJfbmFtZRgEIAEoCVIJdXNlcl9uYW1lEh4KCmV2ZW50X3R5cGUYBSAB",
            "KAlSCmV2ZW50X3R5cGUSGgoIcGxhdGZvcm0YBiABKAlSCHBsYXRmb3JtEjwK",
            "C29jY3VycmVkX2F0GAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cFILb2NjdXJyZWRfYXQSGQoHcGF5bG9hZBgIIAEoCVIIcGxheWxvYWQSSAoM",
            "ZG9uYXRvbl9kYXRhGAkgASgLMioubW9kZXZlbnRicmlkZ2UucGx1Z2luLmV2",
            "ZW50cy5Eb25hdGlvbkRhdGFIAFIEZGF0YRJFCgtwb2ludHNfZGF0YRgKIAEo",
            "CzIoLm1vZGV2ZW50YnJpZGdlLnBsdWdpbi5ldmVudHMuUG9pbnRzRGF0YUgA",
            "UgRkYXRhEkgKCHN1Yl9kYXRhGAsgASgLMi4ubW9kZXZlbnRicmlkZ2UucGx1",
            "Z2luLmV2ZW50cy5TdWJzY3JpcHRpb25EYXRhSABSBGRhdGFCDAoKZGF0YV92",
            "YWx1ZSJmCgxEb25hdGlvbkRhdGESFgoGYW1vdW50GAEgASgFUgZhbW91bnQS",
            "JAoNZG9uYXRpb25fdHlwZRgCIAEoCVINZG9uYXRpb25fdHlwZRIYCgdtZXNz",
            "YWdlGAMgASgJUgdtZXNzYWdlInwKClBvaW50c0RhdGESHAoJcmV3YXJkX2lk",
            "GAEgASgJUglyZXdhcmRfaWQSIgoMcmV3YXJkX3RpdGxlGAIgASgJUgxyZXdh",
            "cmRfdGl0bGUSEgoEY29zdBgDIAEoCVIEY29zdBIYCgdtZXNzYWdlGAQgASgJ",
            "UgdtZXNzYWdlIvkCChBTdWJzY3JpcHRpb25EYXRhEhIKBHBsYW4YASABKAlS",
            "BHBsYW4SHAoJcGxhbl9uYW1lGAIgASgJUglwbGFuX25hbWUSHgoKZXZlbnRf",
            "dHlwZRgDIAEoCVIKZXZlbnRfdHlwZRIsChFjdW11bGF0aXZlX21vbnRocxgE",
            "IAEoBVIRY3VtdWxhdGl2ZV9tb250aHMSJgoNc3RyZWFrX21vbnRocxgFIAEo",
            "BUgAUg1zdHJlYWtfbW9udGhzEhgKB21lc3NhZ2UYBiABKAlSB21lc3NhZ2US",
            "IgoMcmVjaXBpZW50X2lkGAcgASgJUgxyZWNpcGllbnRfaWQSMAoTcmVjaXBp",
            "ZW50X3VzZXJfbmFtZRgIIAEoCVITcmVjaXBpZW50X3VzZXJfbmFtZRI2ChZy",
            "ZWNpcGllbnRfZGlzcGxheV9uYW1lGAkgASgJUhZyZWNpcGllbnRfZGlzcGxh",
            "eV9uYW1lQhUKE3N0cmVha19tb250aHNfdmFsdWUifgoNU3RyZWFtUmVxdWVz",
            "dBIYCgd1c2VyX2lkGAEgASgJUgd1c2VyX2lkElMKDHJlcXVlc3RfdHlwZRgC",
            "IAEoDjIvLm1vZGV2ZW50YnJpZGdlLnBsdWdpbi5ldmVudHMuU3RyZWFtUmVx",
            "dWVzdFR5cGVSDHJlcXVlc3RfdHlwZSpjChFTdHJlYW1SZXF1ZXN0VHlwZRId",
            "ChlVTlNFVF9TVFJFQU1fUkVRVUVTVF9UWVBFEAASFwoTU1RBUlRfU1RSRUFN",
            "X0VWRU5UUxABEhYKElNUT1BfU1RSRUFNX0VWRU5UUxACMnYKDEJyaWRnZUV2",
            "ZW50cxJmCgxTdHJlYW1FdmVudHMSKy5tb2RldmVudGJyaWRnZS5wbHVnaW4u",
            "ZXZlbnRzLlN0cmVhbVJlcXVlc3QaIy5tb2RldmVudGJyaWRnZS5wbHVnaW4u",
            "ZXZlbnRzLkV2ZW50IgAoATABQiSqAiFNb2RFdmVudEJyaWRnZS5QbHVnaW4u",
            "RXZlbnRTb3VyY2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ModEventBridge.Plugin.EventSource.StreamRequestType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ModEventBridge.Plugin.EventSource.Event), global::ModEventBridge.Plugin.EventSource.Event.Parser, new[]{ "TargetId", "TargetName", "UserId", "UserName", "EventType", "Platform", "OccurredAt", "Payload", "DonatonData", "PointsData", "SubData" }, new[]{ "DataValue" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ModEventBridge.Plugin.EventSource.DonationData), global::ModEventBridge.Plugin.EventSource.DonationData.Parser, new[]{ "Amount", "DonationType", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ModEventBridge.Plugin.EventSource.PointsData), global::ModEventBridge.Plugin.EventSource.PointsData.Parser, new[]{ "RewardId", "RewardTitle", "Cost", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ModEventBridge.Plugin.EventSource.SubscriptionData), global::ModEventBridge.Plugin.EventSource.SubscriptionData.Parser, new[]{ "Plan", "PlanName", "EventType", "CumulativeMonths", "StreakMonths", "Message", "RecipientId", "RecipientUserName", "RecipientDisplayName" }, new[]{ "StreakMonthsValue" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ModEventBridge.Plugin.EventSource.StreamRequest), global::ModEventBridge.Plugin.EventSource.StreamRequest.Parser, new[]{ "UserId", "RequestType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum StreamRequestType {
    [pbr::OriginalName("UNSET_STREAM_REQUEST_TYPE")] UnsetStreamRequestType = 0,
    [pbr::OriginalName("START_STREAM_EVENTS")] StartStreamEvents = 1,
    [pbr::OriginalName("STOP_STREAM_EVENTS")] StopStreamEvents = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ModEventBridge.Plugin.EventSource.EventsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      targetId_ = other.targetId_;
      targetName_ = other.targetName_;
      userId_ = other.userId_;
      userName_ = other.userName_;
      eventType_ = other.eventType_;
      platform_ = other.platform_;
      occurredAt_ = other.occurredAt_ != null ? other.occurredAt_.Clone() : null;
      payload_ = other.payload_;
      switch (other.DataValueCase) {
        case DataValueOneofCase.DonatonData:
          DonatonData = other.DonatonData.Clone();
          break;
        case DataValueOneofCase.PointsData:
          PointsData = other.PointsData.Clone();
          break;
        case DataValueOneofCase.SubData:
          SubData = other.SubData.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private string targetId_ = "";
    /// <summary>
    /// TargetID the id of the target (steramer)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetId {
      get { return targetId_; }
      set {
        targetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_name" field.</summary>
    public const int TargetNameFieldNumber = 2;
    private string targetName_ = "";
    /// <summary>
    /// TargetName the name of the target (streamer)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetName {
      get { return targetName_; }
      set {
        targetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 3;
    private string userId_ = "";
    /// <summary>
    /// UserID the user id the the event is for
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 4;
    private string userName_ = "";
    /// <summary>
    /// UserName the user name the event is for
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 5;
    private string eventType_ = "";
    /// <summary>
    /// EventType the type of the event
    /// EG: subscription, donation, points (twitch channel points), ect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventType {
      get { return eventType_; }
      set {
        eventType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 6;
    private string platform_ = "";
    /// <summary>
    /// Platform the platform of the event
    /// EG: twitch, mixer, flocker, streamlabs, streamelemts, ect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "occurred_at" field.</summary>
    public const int OccurredAtFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp occurredAt_;
    /// <summary>
    /// OccurredAt when the event occurred at
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp OccurredAt {
      get { return occurredAt_; }
      set {
        occurredAt_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 8;
    private string payload_ = "";
    /// <summary>
    /// Payload the raw payload of the event
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "donaton_data" field.</summary>
    public const int DonatonDataFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ModEventBridge.Plugin.EventSource.DonationData DonatonData {
      get { return dataValueCase_ == DataValueOneofCase.DonatonData ? (global::ModEventBridge.Plugin.EventSource.DonationData) dataValue_ : null; }
      set {
        dataValue_ = value;
        dataValueCase_ = value == null ? DataValueOneofCase.None : DataValueOneofCase.DonatonData;
      }
    }

    /// <summary>Field number for the "points_data" field.</summary>
    public const int PointsDataFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ModEventBridge.Plugin.EventSource.PointsData PointsData {
      get { return dataValueCase_ == DataValueOneofCase.PointsData ? (global::ModEventBridge.Plugin.EventSource.PointsData) dataValue_ : null; }
      set {
        dataValue_ = value;
        dataValueCase_ = value == null ? DataValueOneofCase.None : DataValueOneofCase.PointsData;
      }
    }

    /// <summary>Field number for the "sub_data" field.</summary>
    public const int SubDataFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ModEventBridge.Plugin.EventSource.SubscriptionData SubData {
      get { return dataValueCase_ == DataValueOneofCase.SubData ? (global::ModEventBridge.Plugin.EventSource.SubscriptionData) dataValue_ : null; }
      set {
        dataValue_ = value;
        dataValueCase_ = value == null ? DataValueOneofCase.None : DataValueOneofCase.SubData;
      }
    }

    private object dataValue_;
    /// <summary>Enum of possible cases for the "data_value" oneof.</summary>
    public enum DataValueOneofCase {
      None = 0,
      DonatonData = 9,
      PointsData = 10,
      SubData = 11,
    }
    private DataValueOneofCase dataValueCase_ = DataValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataValueOneofCase DataValueCase {
      get { return dataValueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDataValue() {
      dataValueCase_ = DataValueOneofCase.None;
      dataValue_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetId != other.TargetId) return false;
      if (TargetName != other.TargetName) return false;
      if (UserId != other.UserId) return false;
      if (UserName != other.UserName) return false;
      if (EventType != other.EventType) return false;
      if (Platform != other.Platform) return false;
      if (!object.Equals(OccurredAt, other.OccurredAt)) return false;
      if (Payload != other.Payload) return false;
      if (!object.Equals(DonatonData, other.DonatonData)) return false;
      if (!object.Equals(PointsData, other.PointsData)) return false;
      if (!object.Equals(SubData, other.SubData)) return false;
      if (DataValueCase != other.DataValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetId.Length != 0) hash ^= TargetId.GetHashCode();
      if (TargetName.Length != 0) hash ^= TargetName.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (EventType.Length != 0) hash ^= EventType.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (occurredAt_ != null) hash ^= OccurredAt.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (dataValueCase_ == DataValueOneofCase.DonatonData) hash ^= DonatonData.GetHashCode();
      if (dataValueCase_ == DataValueOneofCase.PointsData) hash ^= PointsData.GetHashCode();
      if (dataValueCase_ == DataValueOneofCase.SubData) hash ^= SubData.GetHashCode();
      hash ^= (int) dataValueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TargetId);
      }
      if (TargetName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetName);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserName);
      }
      if (EventType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EventType);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Platform);
      }
      if (occurredAt_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(OccurredAt);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Payload);
      }
      if (dataValueCase_ == DataValueOneofCase.DonatonData) {
        output.WriteRawTag(74);
        output.WriteMessage(DonatonData);
      }
      if (dataValueCase_ == DataValueOneofCase.PointsData) {
        output.WriteRawTag(82);
        output.WriteMessage(PointsData);
      }
      if (dataValueCase_ == DataValueOneofCase.SubData) {
        output.WriteRawTag(90);
        output.WriteMessage(SubData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetId);
      }
      if (TargetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetName);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (EventType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventType);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (occurredAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OccurredAt);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Payload);
      }
      if (dataValueCase_ == DataValueOneofCase.DonatonData) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DonatonData);
      }
      if (dataValueCase_ == DataValueOneofCase.PointsData) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PointsData);
      }
      if (dataValueCase_ == DataValueOneofCase.SubData) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.TargetId.Length != 0) {
        TargetId = other.TargetId;
      }
      if (other.TargetName.Length != 0) {
        TargetName = other.TargetName;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.EventType.Length != 0) {
        EventType = other.EventType;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.occurredAt_ != null) {
        if (occurredAt_ == null) {
          OccurredAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        OccurredAt.MergeFrom(other.OccurredAt);
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      switch (other.DataValueCase) {
        case DataValueOneofCase.DonatonData:
          if (DonatonData == null) {
            DonatonData = new global::ModEventBridge.Plugin.EventSource.DonationData();
          }
          DonatonData.MergeFrom(other.DonatonData);
          break;
        case DataValueOneofCase.PointsData:
          if (PointsData == null) {
            PointsData = new global::ModEventBridge.Plugin.EventSource.PointsData();
          }
          PointsData.MergeFrom(other.PointsData);
          break;
        case DataValueOneofCase.SubData:
          if (SubData == null) {
            SubData = new global::ModEventBridge.Plugin.EventSource.SubscriptionData();
          }
          SubData.MergeFrom(other.SubData);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TargetId = input.ReadString();
            break;
          }
          case 18: {
            TargetName = input.ReadString();
            break;
          }
          case 26: {
            UserId = input.ReadString();
            break;
          }
          case 34: {
            UserName = input.ReadString();
            break;
          }
          case 42: {
            EventType = input.ReadString();
            break;
          }
          case 50: {
            Platform = input.ReadString();
            break;
          }
          case 58: {
            if (occurredAt_ == null) {
              OccurredAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OccurredAt);
            break;
          }
          case 66: {
            Payload = input.ReadString();
            break;
          }
          case 74: {
            global::ModEventBridge.Plugin.EventSource.DonationData subBuilder = new global::ModEventBridge.Plugin.EventSource.DonationData();
            if (dataValueCase_ == DataValueOneofCase.DonatonData) {
              subBuilder.MergeFrom(DonatonData);
            }
            input.ReadMessage(subBuilder);
            DonatonData = subBuilder;
            break;
          }
          case 82: {
            global::ModEventBridge.Plugin.EventSource.PointsData subBuilder = new global::ModEventBridge.Plugin.EventSource.PointsData();
            if (dataValueCase_ == DataValueOneofCase.PointsData) {
              subBuilder.MergeFrom(PointsData);
            }
            input.ReadMessage(subBuilder);
            PointsData = subBuilder;
            break;
          }
          case 90: {
            global::ModEventBridge.Plugin.EventSource.SubscriptionData subBuilder = new global::ModEventBridge.Plugin.EventSource.SubscriptionData();
            if (dataValueCase_ == DataValueOneofCase.SubData) {
              subBuilder.MergeFrom(SubData);
            }
            input.ReadMessage(subBuilder);
            SubData = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class DonationData : pb::IMessage<DonationData> {
    private static readonly pb::MessageParser<DonationData> _parser = new pb::MessageParser<DonationData>(() => new DonationData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DonationData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ModEventBridge.Plugin.EventSource.EventsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DonationData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DonationData(DonationData other) : this() {
      amount_ = other.amount_;
      donationType_ = other.donationType_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DonationData Clone() {
      return new DonationData(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private int amount_;
    /// <summary>
    /// Amount the amout used
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "donation_type" field.</summary>
    public const int DonationTypeFieldNumber = 2;
    private string donationType_ = "";
    /// <summary>
    /// DonationType the type of the donation (bits, embers, cents, ect.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DonationType {
      get { return donationType_; }
      set {
        donationType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    /// <summary>
    /// Message the message sent by the user (if available)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DonationData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DonationData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Amount != other.Amount) return false;
      if (DonationType != other.DonationType) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (DonationType.Length != 0) hash ^= DonationType.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Amount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Amount);
      }
      if (DonationType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DonationType);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (DonationType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DonationType);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DonationData other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      if (other.DonationType.Length != 0) {
        DonationType = other.DonationType;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Amount = input.ReadInt32();
            break;
          }
          case 18: {
            DonationType = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PointsData : pb::IMessage<PointsData> {
    private static readonly pb::MessageParser<PointsData> _parser = new pb::MessageParser<PointsData>(() => new PointsData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointsData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ModEventBridge.Plugin.EventSource.EventsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointsData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointsData(PointsData other) : this() {
      rewardId_ = other.rewardId_;
      rewardTitle_ = other.rewardTitle_;
      cost_ = other.cost_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointsData Clone() {
      return new PointsData(this);
    }

    /// <summary>Field number for the "reward_id" field.</summary>
    public const int RewardIdFieldNumber = 1;
    private string rewardId_ = "";
    /// <summary>
    /// RewardID the id of the reward being redeemed with points
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RewardId {
      get { return rewardId_; }
      set {
        rewardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reward_title" field.</summary>
    public const int RewardTitleFieldNumber = 2;
    private string rewardTitle_ = "";
    /// <summary>
    /// RewardTtile the title of the reward
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RewardTitle {
      get { return rewardTitle_; }
      set {
        rewardTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 3;
    private string cost_ = "";
    /// <summary>
    /// Cost the cost of the reward
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cost {
      get { return cost_; }
      set {
        cost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private string message_ = "";
    /// <summary>
    /// Message the message entered by the user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointsData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointsData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RewardId != other.RewardId) return false;
      if (RewardTitle != other.RewardTitle) return false;
      if (Cost != other.Cost) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RewardId.Length != 0) hash ^= RewardId.GetHashCode();
      if (RewardTitle.Length != 0) hash ^= RewardTitle.GetHashCode();
      if (Cost.Length != 0) hash ^= Cost.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RewardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RewardId);
      }
      if (RewardTitle.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RewardTitle);
      }
      if (Cost.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Cost);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RewardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RewardId);
      }
      if (RewardTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RewardTitle);
      }
      if (Cost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cost);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointsData other) {
      if (other == null) {
        return;
      }
      if (other.RewardId.Length != 0) {
        RewardId = other.RewardId;
      }
      if (other.RewardTitle.Length != 0) {
        RewardTitle = other.RewardTitle;
      }
      if (other.Cost.Length != 0) {
        Cost = other.Cost;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RewardId = input.ReadString();
            break;
          }
          case 18: {
            RewardTitle = input.ReadString();
            break;
          }
          case 26: {
            Cost = input.ReadString();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubscriptionData : pb::IMessage<SubscriptionData> {
    private static readonly pb::MessageParser<SubscriptionData> _parser = new pb::MessageParser<SubscriptionData>(() => new SubscriptionData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscriptionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ModEventBridge.Plugin.EventSource.EventsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionData(SubscriptionData other) : this() {
      plan_ = other.plan_;
      planName_ = other.planName_;
      eventType_ = other.eventType_;
      cumulativeMonths_ = other.cumulativeMonths_;
      message_ = other.message_;
      recipientId_ = other.recipientId_;
      recipientUserName_ = other.recipientUserName_;
      recipientDisplayName_ = other.recipientDisplayName_;
      switch (other.StreakMonthsValueCase) {
        case StreakMonthsValueOneofCase.StreakMonths:
          StreakMonths = other.StreakMonths;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionData Clone() {
      return new SubscriptionData(this);
    }

    /// <summary>Field number for the "plan" field.</summary>
    public const int PlanFieldNumber = 1;
    private string plan_ = "";
    /// <summary>
    /// Plan the plan identifier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Plan {
      get { return plan_; }
      set {
        plan_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plan_name" field.</summary>
    public const int PlanNameFieldNumber = 2;
    private string planName_ = "";
    /// <summary>
    /// PlanName the name of th plan
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlanName {
      get { return planName_; }
      set {
        planName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 3;
    private string eventType_ = "";
    /// <summary>
    /// EventType the type of the subscription event (sub, resub, giftsub, ect)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventType {
      get { return eventType_; }
      set {
        eventType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cumulative_months" field.</summary>
    public const int CumulativeMonthsFieldNumber = 4;
    private int cumulativeMonths_;
    /// <summary>
    /// CumulativeMonths the total number of months the user has subscribed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CumulativeMonths {
      get { return cumulativeMonths_; }
      set {
        cumulativeMonths_ = value;
      }
    }

    /// <summary>Field number for the "streak_months" field.</summary>
    public const int StreakMonthsFieldNumber = 5;
    /// <summary>
    /// StreakMonths the number of monts the user has subscribed consecutively
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StreakMonths {
      get { return streakMonthsValueCase_ == StreakMonthsValueOneofCase.StreakMonths ? (int) streakMonthsValue_ : 0; }
      set {
        streakMonthsValue_ = value;
        streakMonthsValueCase_ = StreakMonthsValueOneofCase.StreakMonths;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 6;
    private string message_ = "";
    /// <summary>
    /// Message the message entered by the user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recipient_id" field.</summary>
    public const int RecipientIdFieldNumber = 7;
    private string recipientId_ = "";
    /// <summary>
    /// RecipientID the id of the recipient if the sub was gifted
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RecipientId {
      get { return recipientId_; }
      set {
        recipientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recipient_user_name" field.</summary>
    public const int RecipientUserNameFieldNumber = 8;
    private string recipientUserName_ = "";
    /// <summary>
    /// RecipientUserName the user name of the recipient if the sub was gifted
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RecipientUserName {
      get { return recipientUserName_; }
      set {
        recipientUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recipient_display_name" field.</summary>
    public const int RecipientDisplayNameFieldNumber = 9;
    private string recipientDisplayName_ = "";
    /// <summary>
    /// RecipientDisplayName the display name of the recipient if the sub was gifted
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RecipientDisplayName {
      get { return recipientDisplayName_; }
      set {
        recipientDisplayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object streakMonthsValue_;
    /// <summary>Enum of possible cases for the "streak_months_value" oneof.</summary>
    public enum StreakMonthsValueOneofCase {
      None = 0,
      StreakMonths = 5,
    }
    private StreakMonthsValueOneofCase streakMonthsValueCase_ = StreakMonthsValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreakMonthsValueOneofCase StreakMonthsValueCase {
      get { return streakMonthsValueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreakMonthsValue() {
      streakMonthsValueCase_ = StreakMonthsValueOneofCase.None;
      streakMonthsValue_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscriptionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscriptionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Plan != other.Plan) return false;
      if (PlanName != other.PlanName) return false;
      if (EventType != other.EventType) return false;
      if (CumulativeMonths != other.CumulativeMonths) return false;
      if (StreakMonths != other.StreakMonths) return false;
      if (Message != other.Message) return false;
      if (RecipientId != other.RecipientId) return false;
      if (RecipientUserName != other.RecipientUserName) return false;
      if (RecipientDisplayName != other.RecipientDisplayName) return false;
      if (StreakMonthsValueCase != other.StreakMonthsValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Plan.Length != 0) hash ^= Plan.GetHashCode();
      if (PlanName.Length != 0) hash ^= PlanName.GetHashCode();
      if (EventType.Length != 0) hash ^= EventType.GetHashCode();
      if (CumulativeMonths != 0) hash ^= CumulativeMonths.GetHashCode();
      if (streakMonthsValueCase_ == StreakMonthsValueOneofCase.StreakMonths) hash ^= StreakMonths.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (RecipientId.Length != 0) hash ^= RecipientId.GetHashCode();
      if (RecipientUserName.Length != 0) hash ^= RecipientUserName.GetHashCode();
      if (RecipientDisplayName.Length != 0) hash ^= RecipientDisplayName.GetHashCode();
      hash ^= (int) streakMonthsValueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Plan.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Plan);
      }
      if (PlanName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlanName);
      }
      if (EventType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EventType);
      }
      if (CumulativeMonths != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CumulativeMonths);
      }
      if (streakMonthsValueCase_ == StreakMonthsValueOneofCase.StreakMonths) {
        output.WriteRawTag(40);
        output.WriteInt32(StreakMonths);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (RecipientId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RecipientId);
      }
      if (RecipientUserName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RecipientUserName);
      }
      if (RecipientDisplayName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(RecipientDisplayName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Plan.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Plan);
      }
      if (PlanName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlanName);
      }
      if (EventType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventType);
      }
      if (CumulativeMonths != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CumulativeMonths);
      }
      if (streakMonthsValueCase_ == StreakMonthsValueOneofCase.StreakMonths) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StreakMonths);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (RecipientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RecipientId);
      }
      if (RecipientUserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RecipientUserName);
      }
      if (RecipientDisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RecipientDisplayName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscriptionData other) {
      if (other == null) {
        return;
      }
      if (other.Plan.Length != 0) {
        Plan = other.Plan;
      }
      if (other.PlanName.Length != 0) {
        PlanName = other.PlanName;
      }
      if (other.EventType.Length != 0) {
        EventType = other.EventType;
      }
      if (other.CumulativeMonths != 0) {
        CumulativeMonths = other.CumulativeMonths;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.RecipientId.Length != 0) {
        RecipientId = other.RecipientId;
      }
      if (other.RecipientUserName.Length != 0) {
        RecipientUserName = other.RecipientUserName;
      }
      if (other.RecipientDisplayName.Length != 0) {
        RecipientDisplayName = other.RecipientDisplayName;
      }
      switch (other.StreakMonthsValueCase) {
        case StreakMonthsValueOneofCase.StreakMonths:
          StreakMonths = other.StreakMonths;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Plan = input.ReadString();
            break;
          }
          case 18: {
            PlanName = input.ReadString();
            break;
          }
          case 26: {
            EventType = input.ReadString();
            break;
          }
          case 32: {
            CumulativeMonths = input.ReadInt32();
            break;
          }
          case 40: {
            StreakMonths = input.ReadInt32();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
          case 58: {
            RecipientId = input.ReadString();
            break;
          }
          case 66: {
            RecipientUserName = input.ReadString();
            break;
          }
          case 74: {
            RecipientDisplayName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamRequest : pb::IMessage<StreamRequest> {
    private static readonly pb::MessageParser<StreamRequest> _parser = new pb::MessageParser<StreamRequest>(() => new StreamRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ModEventBridge.Plugin.EventSource.EventsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamRequest(StreamRequest other) : this() {
      userId_ = other.userId_;
      requestType_ = other.requestType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamRequest Clone() {
      return new StreamRequest(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    /// <summary>
    /// UserID the user id of the user to being listening to events for
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request_type" field.</summary>
    public const int RequestTypeFieldNumber = 2;
    private global::ModEventBridge.Plugin.EventSource.StreamRequestType requestType_ = 0;
    /// <summary>
    /// RequestType to start or stop streaming events for a user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ModEventBridge.Plugin.EventSource.StreamRequestType RequestType {
      get { return requestType_; }
      set {
        requestType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (RequestType != other.RequestType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (RequestType != 0) hash ^= RequestType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (RequestType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RequestType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (RequestType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.RequestType != 0) {
        RequestType = other.RequestType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            RequestType = (global::ModEventBridge.Plugin.EventSource.StreamRequestType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
