// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: events_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ModEventBridge.Plugin.EventSource.Service {
  public static partial class BridgeEvents
  {
    static readonly string __ServiceName = "modeventbridge.plugin.events.BridgeEvents";

    static readonly grpc::Marshaller<global::ModEventBridge.Plugin.EventSource.Service.StreamRequest> __Marshaller_modeventbridge_plugin_events_StreamRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ModEventBridge.Plugin.EventSource.Service.StreamRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ModEventBridge.Plugin.EventSource.Event> __Marshaller_modeventbridge_plugin_events_Event = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ModEventBridge.Plugin.EventSource.Event.Parser.ParseFrom);

    static readonly grpc::Method<global::ModEventBridge.Plugin.EventSource.Service.StreamRequest, global::ModEventBridge.Plugin.EventSource.Event> __Method_StreamEvents = new grpc::Method<global::ModEventBridge.Plugin.EventSource.Service.StreamRequest, global::ModEventBridge.Plugin.EventSource.Event>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "StreamEvents",
        __Marshaller_modeventbridge_plugin_events_StreamRequest,
        __Marshaller_modeventbridge_plugin_events_Event);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ModEventBridge.Plugin.EventSource.Service.EventsServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BridgeEvents</summary>
    [grpc::BindServiceMethod(typeof(BridgeEvents), "BindService")]
    public abstract partial class BridgeEventsBase
    {
      /// <summary>
      /// StreamEvents straems the events recieved from plugins
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task StreamEvents(grpc::IAsyncStreamReader<global::ModEventBridge.Plugin.EventSource.Service.StreamRequest> requestStream, grpc::IServerStreamWriter<global::ModEventBridge.Plugin.EventSource.Event> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BridgeEventsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_StreamEvents, serviceImpl.StreamEvents).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, BridgeEventsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_StreamEvents, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::ModEventBridge.Plugin.EventSource.Service.StreamRequest, global::ModEventBridge.Plugin.EventSource.Event>(serviceImpl.StreamEvents));
    }

  }
}
#endregion
